Embedly Preview
===============
Embedly Preview is a jQuery plugin that allows developers to create tools that
enable users to share links with rich previews attached. This method of letting
users select thumbnails, edit title and description has been adopted as the
norm across the web. This plugin allows users to easily implement this
functionality without building the entire infrastructure themselves, instead
relying on on Embedly to generate the metadata.

We have made this plugin overly verbose and infinitely customizable. Our goal
is not to dictate design, merely give a set of tools to make it easy to create
a custom experience. There are X different demos that you should take a look at
before getting started. It will give you a quick overview of what you should be
able to build.

* `Link <http://embedly.github.com/embedly-jquery-preview/demo/link.html>`_
* `Status <http://embedly.github.com/embedly-jquery-preview/demo/status.html>`_
* `Large Embeds <http://embedly.github.com/embedly-jquery-preview/demo/large.html>`_
* `Rich Embeds <http://embedly.github.com/embedly-jquery-preview/demo/rich.html>`_

Basic Setup
-----------
To get started you need to throw `jQuery <http://jquery.com/>`_, `Underscore.js
<http://documentcloud.github.com/underscore/>`_, `Mustache.js
<https://github.com/janl/mustache.js/>`_, jquery.preview.js and the preview.css
.::

    <head>
      <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js" type="text/javascript"></script>
      <script src="lib/underscore-min.js" type="text/javascript"></script>
      <script src="lib/mustache.js" type="text/javascript"></script>
      <script src="jquery.preview.js" type="text/javascript"></script>
      <link rel="stylesheet" href="preview.css" />
    </head>

Next set up a simple form that allows a user to input link::

    <form action="/update" method="POST">
        <textarea id="status"></textarea>
    </form>
    
You then need to tell preview what field to listen to::

    <script>
        $('#status').preview({key:'your_embedly_key'})
    </script>

And you are done setting up the front end solution for Embedly Preview. The
rest of this document will go into how to customize Preview.

How it Works
------------
The plugin works by listening to the field on ``paste``, ``keyup`` and ``blur``
. If a URL is entered a call is made to Embedly's `Preview
<http://embed.ly/docs/endpoints/1/preview>`_ endpoint and the result is then
passed to the Selector object and all the elements are added to the form as 
hidden inputs. The Selector is then rendered using a Mustache template. The
user can use the selector to pick a thumbnail associated with the URL.

When the form is submitted each attribute it passed back to the action URL.
The server then saves the information and either echos or augments the object
and passes it back to the fronted. The Display object then renders the obj into
the feed.

Each object is infinitely customizable, but the flow is the same. We will go
over each object and how to customize them.

Objects
-------
There are 3 basic objects that you should get familiar with in order to
customize the selector.

Preview
^^^^^^^
Preview holds all the logic for calls to Embedly. You shouldn't have to do a
ton of customizations here.

Functions
"""""""""

``submit``
    Called when the form is submitted and all the attributes are passed in as
    an object. If you want to do something other than a POST to the action you
    can overwrite the method like so::
    
        var preview = {
          // Instead of posting to the server, send the object to display for
          // rendering to the feed.
          submit : function(e, data){
            e.preventDefault();
            this.display.create(data);
          }
        }
        $('#id_url').preview({preview:preview});

``bind``
    Called when the preview is set up to bind all the listeners to the file and
    the form. If you want to listen on custom events you can call it like so.
    
        
        var preview = {
          bind : function(){
            // Instead of listening to the field, wait for the user to click
            // 'Attach Link'.
            $('a.attach').bind('click', this.fetch);
            
            // Still bind the form to ``_submit`` that cleans up the data
            // before calling ``submit``
            $(this.form).bind('submit', this._submit);
          }
        }
        $('#id_url').preview({preview:preview});

Selector
^^^^^^^^
Builds the selector that allows users to pick out a thumbnail.

Attributes
""""""""""

``type``
    There are 3 different built-in types that a developer can choose from
    
    * `small <http://embedly.github.com/embedly-jquery-preview/demo/small.html>`_
    * `large <http://embedly.github.com/embedly-jquery-preview/demo/large.html>`_
    * `rich <http://embedly.github.com/embedly-jquery-preview/demo/rich.html>`_

    Each allows for a different type of feel. We suggest using one of them to
    get started and customizing from there.

``template``
    If you would like to use your own Mustache template to render the selector
    you can add it here. The default looks like::
    
        <div id="selector" class="small">
          <div class="thumbnail">
            <div class="controls">
              <a class="left" href="#">&#9664;</a>
              <a class="right" href="#">&#9654;</a>
              <a class="nothumb" href="#">&#10005;</a>
            </div>
            <div class="items">
              <ul class="images">
                {{#images}}
                <li><img src="{{url}}"/></li>
                {{/images}}
              </ul>
            </div>
          </div>
          <div class="attributes">
            <a class="title" href="#">{{title}}</a>
            <p><a class="description" href="#">{{description}}</a></p>
            <span class="meta">
              <img class="favicon" src="{{favicon_url}}">
              <a class="provider" href="{{provider_url}}">{{provider_display}}</a>
            </span>
          </div>
          <div class="action"><a href="#" class="close">&#10005;</a></div>
        </div>


Functions
"""""""""

``title``
    Allows users to click on the title in the selector and edit the text. It is
    set up like this in the ``bind`` function::
    
        $('#selector .title').live('click', this.title);

``description``
    Allows users to click on the description in the selector and edit the text.
    It is set up like this in the ``bind`` function::
    
        $('#selector .description').live('click', this.description);


``scroll``
    Simple logic that scrolls the image left and right in selector. It takes a
    direction (``left`` or ``right``) and an event. We set it up like so::
    
        $('#selector .left').bind('click', _.bind(this.scroll, {}, 'left'));
        $('#selector .right').bind('click', _.bind(this.scroll, {}, 'right'));


``nothumb``
    Logic that tells the form NOT to use a thumbnail when rendering a preview.
    ``bind`` calls it like so::
    
        $('#selector .nothumb').bind('click', this.nothumb);


``clear``
    Clears the selector and all the hidden inputs.
    
``update``
    Update can be set to an input field to also update the value in the
    selector. This is useful if you want to have a different input field for
    title and selector. We use this from the Preview object like so::
    
        $('#id_title').bind('keyup', function(e){
          $.preview.selector.update(e);
        });
    
    The element must have a ``name`` attribute of the ``title`` or 
    ``description``.
    
``bind``
    Sets the listeners for the above functions. Don't overwrite this function
    unless you know what you are doing.

``render``
    Uses Mustache to render the template chosen by the developer. Don't
    overwrite this function unless you know what you are doing.

Display
^^^^^^^
Create's a Feed item for a given object.

Attributes
""""""""""

``template``
    The Mustache template that you would like to use to render the obj. The
    default one looks like this::
    
        <div class="item">
        <div class="thumbnail">
          <a href="{{orginal_url}}">
            <img title="{{title}}" src="{{thumbnail_url}}"/>
            <span class="overlay"></span>
          </a>
        </div>
        <div class="attributes">
          <a class="title" href="{{orginal_url}}">{{title}}</a>
          <p class="description">{{description}}</p>
          <span class="meta">
            '<img class="favicon" src="{{favicon_url}}"/>
            '<a class="provider" href="{{provider_url}}">{{provider_display}}</a>
          </span>
        <div>
      </div>


``selector``
    Tells create where to prepend the Feed item html to. The default value is
    ``#feed``. 

Functions
"""""""""

``create``

    Uses Mustache to render the template chosen by the developer. Don't
    overwrite this function unless you know what you are doing.


Development
-----------
The code is broken down into modules in the ``src`` folder and built by
``watch.py``. If you want to modify anything in ``preview.jquery.js`` please
find the code in the module and run ``python watch.py`` to build
``preview.jquery.js``. ``preview.css`` is a `sass <http://sass-lang.com/>`_
generated file. Please modify ``preview.scss`` by running ``sass --watch
preview.scss:preview.css``
